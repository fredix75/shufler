{# src/SHUFLER/ShuflerBundle/Resources/views/Home/index.html.twig #}

{% extends "SHUFLERShuflerBundle::layout.html.twig" %}

{% block title %}{{ parent() }} TV{% endblock %}

{% block stylesheets %}
	{{  parent() }}
    <link rel="stylesheet" type="text/css" href="{{ asset('bundles/shuflershufler/css/video.css') }}">
{% endblock %}

{% block body %}
	<div class="row">
		<section class="col-sm-12 col-md-12">
			<div id="player"></div>
			<div id="cartouche-bloc" class="col-xs-12 col-sm-12 col-md-12" style="background-color:black;">
				<div id="cartouche" class="col-xs-8 col-sm-8 col-md-11"></div>
				<div class="pull-right" style="padding:1em 0">
					<a class="btn btn-default" onclick="player.previousVideo();"><span class="glyphicon glyphicon-backward"></span></a>
					<a class="btn btn-default" onclick='player.nextVideo();'><span class="glyphicon glyphicon-forward"></span></a>
				</div>
				<div id="description" class="col-md-12" style="color:white;"></div>
			</div> 
		</section>
	</div>
{% endblock %}

{% block javascripts %}
	{{ parent() }}
	
	<script type="text/javascript">
      // 2. This code loads the IFrame Player API code asynchronously.
      var tag = document.createElement('script');

      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // 3. This function creates an <iframe> (and YouTube player)
      //    after the API code downloads.
      
      var progressbar='<img src="{{ asset('bundles/shuflershufler/img/preload.gif') }}" width=100% height=25px/>';
      
      var player;

      function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
          height: '600px',
          width: '100%',
          playerVars: { 'autoplay': 0, 'controls': 1, 'autohide':1,'iv_load_policy':3},
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange,
            'onError': onPlayerError
          }
        });
      }
      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {
        //event.target.playVideo();
        $('#cartouche').html(progressbar);
      	player.loadPlaylist({playlist:[{% for video in videos %} '{{ video }}',{% endfor %}]});
      }

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
      var done = false;
      
      
      function onPlayerStateChange(event) {
		  if(event.data!=2 ){		
          	$('#cartouche').html(progressbar);
          	$('#description').html('');       	
		  }
		  
      	  if (event.data == YT.PlayerState.PLAYING && !done) {
	          //done = true;
	          
	          var index=player.getPlaylistIndex()
	          

	          
	          $.get("{{ youtube_api_videos_url }}", {
		          id: player.getPlaylist()[index],
				  data: "key={{ youtube_key }}",
		          part: 'snippet'
			    }, function(result) {	 
				    if(result && result.items && result.items[0].id) {
				    	$('#cartouche').html(result.items[0].snippet.title);
				    	$('#description').html(result.items[0].snippet.description);
				    }else {
				    	$('#cartouche').html('');
					}
			  },'jsonp');

          }
      }

      
	function onPlayerError(event){
		player.nextVideo();
	}
      
	</script>

	
{% endblock %}