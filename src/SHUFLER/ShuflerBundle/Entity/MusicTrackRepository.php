<?php
namespace SHUFLER\ShuflerBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * MusicTrackRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MusicTrackRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * Get the paginated list of music tracks
     *            
     * @return Paginator
     */
    public function getPaginatedTracks($page = 1, $maxperpage = MusicTrack::MAX_LIST)
    {
        $q = $this->_em->createQueryBuilder()
        ->select('a')
        ->orderBy('a.titre', 'DESC')
        ->from('SHUFLERShuflerBundle:MusicTrack', 'a');
        
        $q->setFirstResult(($page - 1) * $maxperpage)->setMaxResults($maxperpage);
        
        return new Paginator($q);
    }
    
    /**
     * Get All music tracks
     *
     * @return Array 
     */
    public function getTracks()
    {
        $tracks = $this->_em->createQueryBuilder()
        ->select('a')
        ->orderBy('a.titre', 'ASC')
        ->from('SHUFLERShuflerBundle:MusicTrack', 'a')
        ->setMaxResults(10)
        ->getQuery()
        ->getResult();
                
        return $tracks;
    }
    
    /**
     * Get music track by album
     *
     * @return Array
     */
    public function getTracksByAlbum($artiste, $album)
    {
        $tracks = $this->_em->createQueryBuilder()
        ->select('t')
        ->orderBy('t.numero', 'ASC')
        ->from('SHUFLERShuflerBundle:MusicTrack', 't')
        ->where('t.artiste =  :artiste')
        ->setParameter(':artiste', $artiste)
        ->andWhere('t.album = :album')
        ->setParameter(':album', $album)
        ->getQuery()
        ->getResult();
        
        return $tracks;
    }
    
    /**
     * Get music tracks by ajax method
     *
     * @return Array
     */
    public function getTracksAjax($data, $page = 0, $max = NULL, $sort = 'titre', $dir = 'ASC', $getResult = true)
    {

        $qb = $this->_em->createQueryBuilder();
        $query = isset($data['query']) && $data['query']?$data['query']:null;
        
        $qb
        ->select('t')
        ->from('SHUFLERShuflerBundle:MusicTrack', 't')
        ;
        
        if ($query) {
            $qb
            ->andWhere('t.auteur like :query OR t.artiste like :query OR t.titre like :query OR t.album like :query')
            ->setParameter('query', "%".$query."%")
            ;
        }
        
        $qb->orderBy('t.' . $sort, $dir);
        
        
        if($sort !== 'annee')  $qb->addOrderBy('t.annee', $dir);
        if($sort !== 'album')  $qb->addOrderBy('t.album', $dir);
        if($sort !== 'auteur')  $qb->addOrderBy('t.auteur', $dir);
        if($sort !== 'artiste')  $qb->addOrderBy('t.artiste', $dir);
        
        $qb->addOrderBy('t.numero', $dir);
        
        if($sort !== 'titre')  $qb->addOrderBy('t.titre', $dir);
        
        if ($max) {
            $preparedQuery = $qb->getQuery()
            ->setMaxResults($max)
            ->setFirstResult($page * $max)
            ;
        } else {
            $preparedQuery = $qb->getQuery();
        }
        
        return $getResult?$preparedQuery->getResult():$preparedQuery;
    }
    
    /**
     * Get music albums by ajax method
     *
     * @return Array
     */
    public function getAlbumsAjax($data, $page = 0, $max = NULL, $sort = 'album', $dir='ASC', $getResult = true)
    {
        
        $qb = $this->_em->createQueryBuilder();
        $query = isset($data['query']) && $data['query']?$data['query']:null;
        
        $qb
        ->select('t')
        ->from('SHUFLERShuflerBundle:MusicTrack', 't')
        ->groupBy("t.album")
        ->addGroupBy("t.artiste")
        ;
        
        if ($query) {
            $qb
            ->andWhere('t.auteur like :query OR t.artiste like :query OR t.titre like :query OR t.album like :query')
            ->setParameter('query', "%".$query."%")
            ;
        }
        
        $qb->orderBy('t.' . $sort, $dir);
        
        if($sort !== 'annee')  $qb->addOrderBy('t.annee', $dir);
        if($sort !== 'album')  $qb->addOrderBy('t.album', $dir);
        if($sort !== 'artiste')  $qb->addOrderBy('t.artiste', $dir);
                
        if ($max) {
            $preparedQuery = $qb->getQuery()
            ->setMaxResults($max)
            ->setFirstResult($page * $max)
            ;
        } else {
            $preparedQuery = $qb->getQuery();
        }
        
        return $getResult?$preparedQuery->getResult():$preparedQuery;
    }
    
}
